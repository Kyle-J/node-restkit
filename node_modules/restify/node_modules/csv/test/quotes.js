// Generated by CoffeeScript 1.7.1

/*
Test CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)
 */

(function() {
  var csv, fs, should;

  fs = require('fs');

  should = require('should');

  csv = process.env.CSV_COV ? require('../lib-cov') : require('../src');

  describe('quotes', function() {
    describe('parser', function() {
      it('Test regular quotes', function(next) {
        return csv().from.string("20322051544,\"1979.0\",8.8017226E7,\"ABC,45\",\"2000-01-01\"\n28392898392,1974.0,\"8.8392926E7\",DEF,23,2050-11-27").to.string(function(data) {
          data.should.eql("20322051544,1979.0,8.8017226E7,\"ABC,45\",2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27");
          return next();
        });
      });
      it('should read quoted values containing delimiters and write around quote only the value containing delimiters', function(next) {
        return csv().from.string("20322051544,\",1979.0,8.8017226E7,ABC,45,2000-01-01\"\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27\n\"28392898392,1974.0\",\"8.8392926E7\",\"DEF,23,2050-11-27\"").to.string(function(data) {
          data.should.eql("20322051544,\",1979.0,8.8017226E7,ABC,45,2000-01-01\"\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27\n\"28392898392,1974.0\",8.8392926E7,\"DEF,23,2050-11-27\"");
          return next();
        });
      });
      it('Test quotes inside field', function(next) {
        return csv().from.string("20322051544,\"1979.0\",8.801\"7226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,2\"3,2050-11-27").to.string(function(data) {
          data.should.eql("20322051544,1979.0,\"8.801\"\"7226E7\",ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,\"2\"\"3\",2050-11-27");
          return next();
        });
      });
      it('Test empty value', function(next) {
        return csv().from.string("20322051544,\"\",8.8017226E7,45,\"\"\n\"\",1974,8.8392926E7,\"\",\"\"", {
          quote: '"',
          escape: '"'
        }).to.string(function(data) {
          data.should.eql("20322051544,,8.8017226E7,45,\n,1974,8.8392926E7,,");
          return next();
        });
      });
      it('should read values with quotes, escaped as double quotes, and write empty values as not quoted', function(next) {
        return csv().from.string("20322051544,\"\"\"\",8.8017226E7,45,\"\"\"ok\"\"\"\n\"\",1974,8.8392926E7,\"\",\"\"", {
          quote: '"',
          escape: '"'
        }).on('record', function(record, index) {
          record.length.should.eql(5);
          if (index === 0) {
            record[1].should.eql('"');
            return record[4].should.eql('"ok"');
          }
        }).to.string(function(data) {
          data.should.eql("20322051544,\"\"\"\",8.8017226E7,45,\"\"\"ok\"\"\"\n,1974,8.8392926E7,,");
          return next();
        });
      });
      return it('should accept line breaks inside quotes', function(next) {
        return csv().from.string("20322051544,\"\n\",8.8017226E7,45,\"\nok\n\"\n\"\n\",1974,8.8392926E7,\"\",\"\n\"", {
          quote: '"',
          escape: '"'
        }).on('record', function(record, index) {
          return record.length.should.eql(5);
        }).to.string(function(data) {
          data.should.eql("20322051544,\"\n\",8.8017226E7,45,\"\nok\n\"\n\"\n\",1974,8.8392926E7,,\"\n\"");
          return next();
        });
      });
    });
    describe('error', function() {
      it('when unclosed', function(next) {
        return csv().from.string("\"\",1974,8.8392926E7,\"\",\"", {
          quote: '"',
          escape: '"'
        }).on('close', function() {
          return false.should.be.ok;
        }).on('error', function(e) {
          e.message.should.eql('Quoted field not terminated at line 1');
          return next();
        });
      });
      it('when invalid quotes', function(next) {
        return csv().from.string("\"\"  1974    8.8392926E7 \"\"t \"\"\n\"\"  1974    8.8392926E7 \"\"  \"\"", {
          quote: '"',
          escape: '"',
          delimiter: "\t"
        }).on('close', function() {
          return false.should.be.ok;
        }).on('error', function(e) {
          e.message.should.eql('Invalid closing quote at line 1; found " " instead of delimiter "\\t"');
          return next();
        });
      });
      it('when invalid quotes from string', function(next) {
        return csv().from.string('"",1974,8.8392926E7,""t,""', {
          quote: '"',
          escape: '"'
        }).on('close', function() {
          return false.should.be.ok;
        }).on('error', function(e) {
          e.message.should.match(/Invalid closing quote/);
          return next();
        });
      });
      return it.skip('when around invalid quotes', function(next) {
        return csv().from.string("384682,SAMAY Hostel,Jiron \"Florida 285\"", {
          quote: '"',
          escape: '"',
          relax: true
        }).on('error', function(e) {
          e.message.should.match(/Invalid closing quote/);
          return next();
        });
      });
    });
    return describe('serializer', function() {
      return it('should quotes all fields', function(next) {
        return csv().from.string("20322051544,\"1979.0\",8.801\"7226E7,ABC\n\"283928\"\"98392\",1974.0,8.8392926E7,DEF").on('error', function(e) {
          return false.should.be.ok;
        }).to.string(function(data) {
          data.should.eql("\"20322051544\",\"1979.0\",\"8.801\"\"7226E7\",\"ABC\"\n\"283928\"\"98392\",\"1974.0\",\"8.8392926E7\",\"DEF\"");
          return next();
        }, {
          quoted: true
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=quotes.map
