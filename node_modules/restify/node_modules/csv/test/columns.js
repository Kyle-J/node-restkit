// Generated by CoffeeScript 1.7.1

/*
Test CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)
 */

(function() {
  var csv, fs, should;

  fs = require('fs');

  should = require('should');

  csv = process.env.CSV_COV ? require('../lib-cov') : require('../src');

  describe('columns', function() {
    describe('defined in read option', function() {
      it('accept a boolean true', function(next) {
        var count;
        count = 0;
        return csv().from.string("FIELD_1,FIELD_2,FIELD_3,FIELD_4,FIELD_5,FIELD_6\n20322051544,1979,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974,8.8392926E7,DEF,23,2050-11-27", {
          columns: true
        }).transform(function(record, index) {
          record.should.not.be.an["instanceof"](Array);
          if (index === 0) {
            record.should.eql({
              FIELD_1: '20322051544',
              FIELD_2: '1979',
              FIELD_3: '8.8017226E7',
              FIELD_4: 'ABC',
              FIELD_5: '45',
              FIELD_6: '2000-01-01'
            });
          } else if (index === 1) {
            record.FIELD_4.should.eql('DEF');
          }
          return record;
        }).on('record', function(record, index) {
          record.should.not.be.an["instanceof"](Array);
          index.should.eql(count);
          if (index === 0) {
            record.should.eql({
              FIELD_1: '20322051544',
              FIELD_2: '1979',
              FIELD_3: '8.8017226E7',
              FIELD_4: 'ABC',
              FIELD_5: '45',
              FIELD_6: '2000-01-01'
            });
          } else if (index === 1) {
            record.FIELD_4.should.eql('DEF');
          }
          return count++;
        }).to.string(function(result) {
          result.should.eql("20322051544,1979,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974,8.8392926E7,DEF,23,2050-11-27");
          return next();
        });
      });
      it('accept a list of column names', function(next) {
        var count;
        count = 0;
        return csv().from.string("20322051544,1979,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974,8.8392926E7,DEF,23,2050-11-27", {
          columns: ["FIELD_1", "FIELD_2", "FIELD_3", "FIELD_4", "FIELD_5", "FIELD_6"]
        }).transform(function(record, index) {
          record.should.not.be.an["instanceof"](Array);
          if (index === 0) {
            record.FIELD_1.should.eql('20322051544');
          } else if (index === 1) {
            record.FIELD_4.should.eql('DEF');
          }
          return record;
        }).on('record', function(record, index) {
          record.should.not.be.an["instanceof"](Array);
          index.should.eql(count);
          if (index === 0) {
            record.FIELD_1.should.eql('20322051544');
          } else if (index === 1) {
            record.FIELD_4.should.eql('DEF');
          }
          return count++;
        }).to.string(function(result) {
          result.should.eql("20322051544,1979,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974,8.8392926E7,DEF,23,2050-11-27");
          return next();
        });
      });
      return it('should map the column property name to display name', function(next) {
        var data, transformCount;
        transformCount = 0;
        data = [
          {
            field1: 'val11',
            field2: 'val12',
            field3: 'val13'
          }, {
            field1: 'val21',
            field2: 'val22',
            field3: 'val23'
          }
        ];
        return csv().from(data, {
          columns: {
            field1: 'column1',
            field3: 'column3'
          }
        }).transform(function(record, index) {
          transformCount++;
          record.should.eql({
            field1: data[index].field1,
            field3: data[index].field3
          });
          return record;
        }).to(function(data) {
          data.should.eql('column1,column3\nval11,val13\nval21,val23');
          transformCount.should.eql(2);
          return next();
        }, {
          header: true
        });
      });
    });
    describe('defined in write option', function() {
      it('should be the same length', function(next) {
        return csv().from.string("20322051544,1979,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974,8.8392926E7,DEF,23,2050-11-27").on('record', function(record, index) {
          return record.should.be.an["instanceof"](Array);
        }).to.string(function(result) {
          result.should.eql("20322051544,1979\n28392898392,1974");
          return next();
        }, {
          columns: ["FIELD_1", "FIELD_2"]
        });
      });
      it('should filter from a transformed object', function(next) {
        return csv().from.string("20322051544,1979,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974,8.8392926E7,DEF,23,2050-11-27").transform(function(record, index) {
          record.should.be.an["instanceof"](Array);
          return {
            FIELD_2: record[3],
            zombie: record[1],
            FIELD_1: record[4]
          };
        }).on('record', function(record, index) {
          return record.should.not.be.an["instanceof"](Array);
        }).on('end', function(count) {
          return count.should.eql(2);
        }).to.string(function(result) {
          result.should.eql("45,ABC\n23,DEF");
          return next();
        }, {
          columns: ["FIELD_1", "FIELD_2"]
        });
      });
      it('should emit new columns in output', function(next) {
        process.maxTickDepth = 2;
        return csv().from.string("FIELD_1,FIELD_2,FIELD_3,FIELD_4,FIELD_5,FIELD_6\n20322051544,1979,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974,8.8392926E7,DEF,23,2050-11-27\n83929843999,1944,8.8349294E2,HIJ,17,2060-08-28", {
          columns: true
        }).transform(function(record) {
          record.should.have.type('object');
          record.FIELD_7 = 'new_field';
          return record;
        }).on('end', function(count) {
          return count.should.eql(3);
        }).to.string(function(result) {
          result.should.eql("FIELD_1,FIELD_2,FIELD_3,FIELD_4,FIELD_5,FIELD_6,FIELD_7\n20322051544,1979,8.8017226E7,ABC,45,2000-01-01,new_field\n28392898392,1974,8.8392926E7,DEF,23,2050-11-27,new_field\n83929843999,1944,8.8349294E2,HIJ,17,2060-08-28,new_field");
          return next();
        }, {
          newColumns: true,
          header: true
        });
      });
      it('should map the column property name to display name', function(next) {
        var data, transformCount;
        transformCount = 0;
        data = [
          {
            field1: 'val11',
            field2: 'val12',
            field3: 'val13'
          }, {
            field1: 'val21',
            field2: 'val22',
            field3: 'val23'
          }
        ];
        return csv().from(data).transform(function(record, index) {
          transformCount++;
          record.should.eql(data[index]);
          return record;
        }).to(function(data) {
          data.should.eql('column1,column3\nval11,val13\nval21,val23');
          transformCount.should.eql(2);
          return next();
        }, {
          header: true,
          columns: {
            field1: 'column1',
            field3: 'column3'
          }
        });
      });
      return it('is defined as an array and output with to.array while skiping last column', function(next) {
        return csv().from("a,b,c,d").to.array(function(data, count) {
          data.should.eql([
            {
              field1: 'a',
              field2: 'b',
              field3: 'c'
            }
          ]);
          return next();
        }, {
          columns: ['field1', 'field2', 'field3']
        });
      });
    });
    return describe('with both options', function() {
      it('accepts from columns as true ans to columns as array', function(next) {
        return csv().from('field1,field2,field3\nval1,val2,val3', {
          columns: true
        }).to(function(data) {
          data.should.eql('val1,val3');
          return next();
        }, {
          columns: ['field1', 'field3']
        });
      });
      it('accepts from columns as true ans to columns as object with header', function(next) {
        return csv().from('field1,field2,field3\nval1,val2,val3', {
          columns: true
        }).to(function(data) {
          data.should.eql('column1,column3\nval1,val3');
          return next();
        }, {
          columns: {
            field1: 'column1',
            field3: 'column3'
          },
          header: true
        });
      });
      it('accepts from and to as arrays inside to.array', function(next) {
        return csv().from("id,out,title,description\na,b,c,d", {
          columns: true
        }).to.array(function(data, count) {
          data.should.eql([
            {
              id: 'a',
              title: 'c',
              description: 'd'
            }
          ]);
          return next();
        }, {
          columns: ['id', 'title', 'description']
        });
      });
      return it('reorders if from and to columns are arrays', function(next) {
        return csv().from('val1,val2,val3', {
          columns: ['a', 'b', 'c']
        }).to(function(data) {
          data.should.eql('val3,val2,val1');
          return next();
        }, {
          columns: ['c', 'b', 'a']
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=columns.map
