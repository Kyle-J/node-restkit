// Generated by CoffeeScript 1.7.1

/*
Test CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)
 */

(function() {
  var csv, fs, nextTick, should, timers;

  fs = require('fs');

  should = require('should');

  csv = process.env.CSV_COV ? require('../lib-cov') : require('../src');

  timers = require('timers');

  nextTick = timers.setImmediate ? timers.setImmediate : process.nextTick;

  describe('escape', function() {
    it('should honor the default double quote escape charactere', function(next) {
      return csv().from.string("20322051544,\"19\"\"79.0\",8.8017226E7,\"A\"\"B\"\"C\",45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27", {
        escape: '"'
      }).on('record', function(record, index) {
        if (index === 0) {
          record[1].should.eql('19"79.0');
          return record[3].should.eql('A"B"C');
        }
      }).to.string(function(result) {
        result.should.eql("20322051544,\"19\"\"79.0\",8.8017226E7,\"A\"\"B\"\"C\",45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27");
        return next();
      });
    });
    it('should honor the backslash escape charactere', function(next) {
      return csv().from.string("20322051544,\"19\\\"79.0\",8.8017226E7,\"A\\\"B\\\"C\",45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27", {
        escape: '\\'
      }).on('record', function(record, index) {
        if (index === 0) {
          record[1].should.eql('19"79.0');
          return record[3].should.eql('A"B"C');
        }
      }).to.string(function(result) {
        result.should.eql("20322051544,\"19\\\"79.0\",8.8017226E7,\"A\\\"B\\\"C\",45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27");
        return next();
      });
    });
    return it('should parse if next char is not in the current chunk', function(next) {
      var ChunksStream, Stream, data, records, util;
      util = require('util');
      Stream = require('stream').Stream;
      ChunksStream = function(chunks) {
        var i, self, tick;
        self = this;
        i = 0;
        tick = function() {
          if (i < chunks.length) {
            self.emit('data', chunks[i++]);
            return nextTick(tick);
          } else {
            return self.emit('end');
          }
        };
        nextTick(tick);
        return null;
      };
      util.inherits(ChunksStream, Stream);
      ChunksStream.prototype.destroy = function() {};
      data = ['"field with \\', '" inside"'];
      records = [];
      return csv().from.stream(new ChunksStream(data), {
        escape: '\\'
      }).on('error', function(err) {
        return next(err);
      }).on('record', function(record) {
        return records.push(record);
      }).on('end', function(c) {
        records.length.should.eql(1);
        records[0][0].should.eql('field with " inside');
        return next();
      });
    });
  });

}).call(this);

//# sourceMappingURL=escape.map
