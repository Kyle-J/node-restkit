// Generated by CoffeeScript 1.7.1

/*
Node CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)
Testing the read options `trim`, `ltrim` and `rtrim`.
 */

(function() {
  var csv, fs, should;

  fs = require('fs');

  should = require('should');

  csv = process.env.CSV_COV ? require('../lib-cov') : require('../src');

  describe('ltrim', function() {
    it('should ignore the whitespaces immediately following the delimiter', function(next) {
      return csv().from.string("FIELD 1, FIELD 2,	FIELD 3,    FIELD 4, FIELD 5,				 FIELD 6\n20322051544,\" 1979\",8.8017226E7,	    ABC,45,2000-01-01\n28392898392,		\"	    1974\",  8.8392926E7,DEF,   23, 2050-11-27", {
        ltrim: true
      }).transform(function(record, index) {
        return record;
      }).on('close', function(count) {
        return count.should.eql(3);
      }).to.string(function(data) {
        data.should.eql("FIELD 1,FIELD 2,FIELD 3,FIELD 4,FIELD 5,FIELD 6\n20322051544, 1979,8.8017226E7,ABC,45,2000-01-01\n28392898392,	    1974,8.8392926E7,DEF,23,2050-11-27");
        return next();
      });
    });
    return it('should work on last field', function(next) {
      return csv().from.string("FIELD_1, FIELD_2\n20322051544, a\n28392898392, \" \"", {
        ltrim: true
      }).transform(function(record, index) {
        return record;
      }).on('close', function(count) {
        return count.should.eql(3);
      }).to.string(function(data) {
        data.should.eql("FIELD_1,FIELD_2\n20322051544,a\n28392898392, ");
        return next();
      });
    });
  });

  describe('rtrim', function() {
    return it('should ignore the whitespaces immediately preceding the delimiter', function(next) {
      return csv().from.string("FIELD_1 ,FIELD_2  ,FIELD_3	,FIELD_4		,FIELD_5 ,FIELD_6   	 	 	\n20322051544		,1979,8.8017226E7  ,ABC,45		,2000-01-01	 \n28392898392,1974   	 ,8.8392926E7,DEF,23 ,2050-11-27 ", {
        rtrim: true
      }).transform(function(record, index) {
        return record;
      }).on('close', function(count) {
        return count.should.eql(3);
      }).to.string(function(data) {
        data.should.eql("FIELD_1,FIELD_2,FIELD_3,FIELD_4,FIELD_5,FIELD_6\n20322051544,1979,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974,8.8392926E7,DEF,23,2050-11-27");
        return next();
      });
    });
  });

  describe('trim', function() {
    it('should ignore the whitespaces immediately preceding and following the delimiter', function(next) {
      return csv().from.string("  FIELD 1  ,	FIELD 2	, FIELD 3,FIELD 4 ,	FIELD 5,FIELD 6		\n20322051544,1979	,8.8017226E7,ABC  , 45 ,	  2000-01-01\n  28392898392,		1974,8.8392926E7,DEF   ,  23 , 2050-11-27", {
        trim: true
      }).transform(function(record, index) {
        return record;
      }).on('close', function(count) {
        return count.should.eql(3);
      }).to.string(function(data) {
        data.should.eql("FIELD 1,FIELD 2,FIELD 3,FIELD 4,FIELD 5,FIELD 6\n20322051544,1979,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974,8.8392926E7,DEF,23,2050-11-27");
        return next();
      });
    });
    it('should preserve surrounding whitespaces', function(next) {
      return csv().from.string("  FIELD 1  ,	FIELD 2	, FIELD 3,FIELD 4 ,	FIELD 5,FIELD 6		\n20322051544,1979	,8.8017226E7,AB C  , 45 ,	  2000-01-01\n  28392898392,		1974,8.8392926E7,D EF   ,  23 , 2050-11-27").transform(function(record, index) {
        return record;
      }).on('close', function(count) {
        return count.should.eql(3);
      }).to.string(function(data) {
        data.should.eql("  FIELD 1  ,	FIELD 2	, FIELD 3,FIELD 4 ,	FIELD 5,FIELD 6		\n20322051544,1979	,8.8017226E7,AB C  , 45 ,	  2000-01-01\n  28392898392,		1974,8.8392926E7,D EF   ,  23 , 2050-11-27");
        return next();
      });
    });
    return it('should preserve whitespace inside text if there are quotes or not', function(next) {
      return csv().from.string("FIELD 1,  FIELD 2, FIELD 3, FIELD 4, FIELD 5, FIELD 6\n20322051544, 1979, 8.8017226E7, ABC DEF , 45, 2000-01-01\n28392898392, 1974, 8.8392926E7,\" ABC DEF \", 23, 2050-11-27", {
        trim: true
      }).transform(function(record, index) {
        return record;
      }).on('close', function(count) {
        return count.should.eql(3);
      }).to.string(function(data) {
        data.should.eql("FIELD 1,FIELD 2,FIELD 3,FIELD 4,FIELD 5,FIELD 6\n20322051544,1979,8.8017226E7,ABC DEF,45,2000-01-01\n28392898392,1974,8.8392926E7, ABC DEF ,23,2050-11-27");
        return next();
      });
    });
  });

}).call(this);

//# sourceMappingURL=trim.map
