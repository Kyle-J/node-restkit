// Generated by CoffeeScript 1.7.1

/*
Test CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)
 */

(function() {
  var Iconv, csv, fs, generator, should;

  fs = require('fs');

  should = require('should');

  Iconv = require('iconv').Iconv;

  csv = process.env.CSV_COV ? require('../lib-cov') : require('../src');

  generator = process.env.CSV_COV ? require('../lib-cov/generator') : require('../src/generator');

  describe('from', function() {
    describe('auto', function() {
      it('should parse a string', function(next) {
        return csv().from('"1","2","3","4","5"').on('record', function(record) {
          return record.length.should.eql(5);
        }).on('end', function() {
          return next();
        });
      });
      it('should parse an array', function(next) {
        return csv().from(['"1","2","3","4","5"', ['1', '2', '3', '4', '5']]).on('record', function(record) {
          return record.length.should.eql(5);
        }).on('end', function() {
          return next();
        });
      });
      it('should parse a file', function(next) {
        return csv().from("" + __dirname + "/from/file.csv").on('record', function(record) {
          return record.length.should.eql(5);
        }).on('end', function() {
          return next();
        });
      });
      return it('should parse a stream', function(next) {
        return csv().from(fs.createReadStream("" + __dirname + "/from/file.csv")).on('record', function(record) {
          return record.length.should.eql(5);
        }).on('end', function() {
          return next();
        });
      });
    });
    describe('path', function() {
      it('should read a file', function(next) {
        return csv().from.path("" + __dirname + "/from/file.csv").on('record', function(record) {
          record.length.should.eql(5);
          return record.should.eql(['1', '2', '3', '4', '5']);
        }).on('end', function() {
          return next();
        });
      });
      it('should strip UTF-8 BOM', function(next) {
        return csv().from.path("" + __dirname + "/from/file_bom.csv").on('record', function(record) {
          record.length.should.eql(5);
          return record.should.eql(['1', '2', '3', '4', '5']);
        }).on('end', function() {
          return next();
        });
      });
      it('should deal with source encoding', function(next) {
        var iconv, parser;
        iconv = new Iconv('latin1', 'utf-8');
        parser = csv().transform(function(data, index) {
          if (index === 1) {
            data[0].should.eql('çà va');
          }
          return data;
        });
        return fs.createReadStream("" + __dirname + "/fromto/encoding_latin1.csv").pipe(iconv).pipe(parser).pipe(fs.createWriteStream("" + __dirname + "/fromto/encoding_utf8.tmp")).on('close', function() {
          var expect, result;
          expect = fs.readFileSync("" + __dirname + "/fromto/encoding_utf8.csv");
          result = fs.readFileSync("" + __dirname + "/fromto/encoding_utf8.tmp");
          result.should.eql(expect);
          return fs.unlink("" + __dirname + "/fromto/encoding_utf8.tmp", next);
        });
      });
      return it('catch error if path does not exist', function(next) {
        return csv().from.path("wrong/path").to.array(function(data, count) {
          return next(new Error('Should not be called'));
        }).on("error", function(err) {
          "ENOENT".should.eql(err.code);
          return next();
        });
      });
    });
    describe('stream', function() {
      return it('should be able to pause', function(next) {
        var paused;
        paused = false;
        return csv().from.stream(generator({
          start: true,
          duration: 500
        })).on('record', function(record, index) {
          var resume;
          paused.should.be["false"];
          if (index === 5) {
            this.pause();
            this.paused.should.be["true"];
            paused = true;
            resume = (function(_this) {
              return function() {
                paused = false;
                return _this.resume();
              };
            })(this);
            return setTimeout(resume, 100);
          }
        }).on('end', function() {
          paused.should.be["false"];
          return next();
        });
      });
    });
    describe('string', function() {
      it('should call record event when record is provided in from', function(next) {
        return csv().from.string('"1","2","3","4","5"').on('record', function(record) {
          return record.length.should.eql(5);
        }).on('end', function() {
          return next();
        });
      });
      it('should include empty last column', function(next) {
        return csv().from.string('"1","2","3","4","5",').on('record', function(record) {
          return record.length.should.eql(6);
        }).on('end', function() {
          return next();
        });
      });
      it('should include empty last column surrounded by quotes', function(next) {
        return csv().from.string('"1","2","3","4","5",""').on('record', function(record) {
          return record.length.should.eql(6);
        }).on('end', function() {
          return next();
        });
      });
      return it('should include empty last column if followed by linebreak', function(next) {
        return csv().from.string('"1","2","3","4","5",""\n').on('record', function(record) {
          return record.length.should.eql(6);
        }).on('end', function() {
          return next();
        });
      });
    });
    it('Test string without destination', function(next) {
      var string;
      string = "20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27";
      return csv().from.string(string).on('record', function(record, index) {
        index.should.be.below(2);
        if (index === 0) {
          return record[0].should.eql('20322051544');
        } else if (index === 1) {
          return record[0].should.eql('28392898392');
        }
      }).on('end', function(count) {
        count.should.eql(2);
        return next();
      });
    });
    return describe('array', function() {
      it('should emit all records as objects', function(next) {
        var data, onRecordCount, transformCount;
        transformCount = onRecordCount = 0;
        data = [
          {
            field1: 'val11',
            field2: 'val12',
            field3: 'val13'
          }, {
            field1: 'val21',
            field2: 'val22',
            field3: 'val23'
          }
        ];
        return csv().from.array(data).transform(function(record, index) {
          transformCount++;
          record.should.eql(data[index]);
          return record;
        }).on('record', function(record, index) {
          onRecordCount++;
          return record.should.eql(data[index]);
        }).to(function(data) {
          data.should.eql('val11,val12,val13\nval21,val22,val23');
          transformCount.should.equal(2);
          onRecordCount.should.equal(2);
          return next();
        });
      });
      it('should handle column option set to true', function(next) {
        var data, onRecordCount, transformCount;
        transformCount = onRecordCount = 0;
        data = [
          ['field1', 'field3'], {
            field1: 'val11',
            field2: 'val12',
            field3: 'val13'
          }, {
            field1: 'val21',
            field2: 'val22',
            field3: 'val23'
          }
        ];
        return csv().from.array(data, {
          columns: true
        }).transform(function(record, index) {
          transformCount++;
          record.should.eql({
            field1: data[index + 1].field1,
            field3: data[index + 1].field3
          });
          return record;
        }).on('record', function(record, index) {
          onRecordCount++;
          return record.should.eql({
            field1: data[index + 1].field1,
            field3: data[index + 1].field3
          });
        }).to(function(data) {
          data.should.eql('val11,val13\nval21,val23');
          transformCount.should.equal(2);
          onRecordCount.should.equal(2);
          return next();
        });
      });
      it('should filter by columns', function(next) {
        var data, onRecordCount, transformCount;
        transformCount = onRecordCount = 0;
        data = [
          {
            field1: 'val11',
            field2: 'val12',
            field3: 'val13'
          }, {
            field1: 'val21',
            field2: 'val22',
            field3: 'val23'
          }
        ];
        return csv().from.array(data, {
          columns: ['field1', 'field3']
        }).transform(function(record, index) {
          transformCount++;
          record.should.eql({
            field1: data[index].field1,
            field3: data[index].field3
          });
          return record;
        }).on('record', function(record, index) {
          onRecordCount++;
          return record.should.eql({
            field1: data[index].field1,
            field3: data[index].field3
          });
        }).to(function(data) {
          data.should.eql('val11,val13\nval21,val23');
          transformCount.should.equal(2);
          onRecordCount.should.equal(2);
          return next();
        });
      });
      it('should preserve 0 values', function(next) {
        var data;
        data = [[250, 0], [251, 17], [252, 0]];
        return csv().from.array(data, {
          columns: ['id', 'counter']
        }).to.string(function(data) {
          data.should.eql('250,0\n251,17\n252,0');
          return next();
        });
      });
      it('should handle null values', function(next) {
        var data;
        data = [[250, null], [251, 17], [252, null]];
        return csv().from.array(data, {
          columns: ['id', 'counter']
        }).to.string(function(data) {
          data.should.eql('250,\n251,17\n252,');
          return next();
        });
      });
      return it('should handle undefined values', function(next) {
        var data;
        data = [[250, void 0], [251, 17], [252, void 0]];
        return csv().from.array(data, {
          columns: ['id', 'counter']
        }).to.string(function(data) {
          data.should.eql('250,\n251,17\n252,');
          return next();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=from.map
