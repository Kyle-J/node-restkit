// Generated by CoffeeScript 1.7.1

/*
Test CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)
 */

(function() {
  var csv, fs, should;

  fs = require('fs');

  should = require('should');

  csv = process.env.CSV_COV ? require('../lib-cov') : require('../src');

  describe('rowDelimiter', function() {
    describe('from', function(next) {
      it('Test line breaks custom', function(next) {
        return csv().from.string("ABC,45::DEF,23", {
          rowDelimiter: '::'
        }).on('end', function(count) {
          return count.should.eql(2);
        }).to.string(function(result) {
          result.should.eql("ABC,45\nDEF,23");
          return next();
        });
      });
      it('should handle new line precede with a quote', function(next) {
        return csv().from.string("\"ABC\",\"45\"::\"DEF\",\"23\"::\"GHI\",\"94\"", {
          rowDelimiter: '::'
        }).on('end', function(count) {
          return count.should.eql(3);
        }).to.string(function(result) {
          result.should.eql("ABC,45\nDEF,23\nGHI,94");
          return next();
        });
      });
      it('should handle chuncks of multiple chars', function(next) {
        var test;
        test = csv().from.options({
          rowDelimiter: '::'
        }).on('end', function(count) {
          return count.should.eql(4);
        }).to.string(function(result) {
          result.should.eql("ABC,45\nDEF,23\nGHI,94\nJKL,02");
          return next();
        });
        test.write('"ABC","45"');
        test.write('::"DEF","23":');
        test.write(':"GHI","94"::');
        test.write('"JKL","02"');
        return test.end();
      });
      return it('should handle chuncks in autodiscovery', function(next) {
        var test;
        test = csv().on('end', function(count) {
          return count.should.eql(4);
        }).to.string(function(result) {
          result.should.eql("ABC,45\nDEF,23\nGHI,94\nJKL,02");
          return next();
        });
        test.write('"ABC","45"');
        test.write('\n"DEF","23"\n');
        test.write('"GHI","94"\n');
        test.write('"JKL","02"');
        return test.end();
      });
    });
    return describe('to', function() {
      it('Test line breaks custom', function(next) {
        return csv().from.string("20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27").on('end', function(count) {
          return count.should.eql(2);
        }).to.string(function(result) {
          result.should.eql("20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01::28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27");
          return next();
        }, {
          rowDelimiter: '::'
        });
      });
      it('Test line breaks unix', function(next) {
        return csv().from.string("20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27").to.string(function(result) {
          result.should.eql("20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27");
          return next();
        }, {
          rowDelimiter: 'unix'
        });
      });
      it('Test line breaks unicode', function(next) {
        return csv().from.string("20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27").to.string(function(result) {
          result.should.eql("20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\u202828392898392,1974.0,8.8392926E7,DEF,23,2050-11-27");
          return next();
        }, {
          rowDelimiter: 'unicode'
        });
      });
      it('Test line breaks mac', function(next) {
        return csv().from.string("20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27").to.string(function(result) {
          result.should.eql("20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\r28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27");
          return next();
        }, {
          rowDelimiter: 'mac'
        });
      });
      return it('Test line breaks windows', function(next) {
        return csv().from.string("20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27").to.string(function(result) {
          result.should.eql("20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\r\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27");
          return next();
        }, {
          rowDelimiter: 'windows'
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=rowDelimiter.map
