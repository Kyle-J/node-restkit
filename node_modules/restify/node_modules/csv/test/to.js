// Generated by CoffeeScript 1.7.1

/*
Test CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)
 */

(function() {
  var Iconv, csv, fs, should, stream;

  fs = require('fs');

  stream = require('stream');

  should = require('should');

  Iconv = require('iconv').Iconv;

  csv = process.env.CSV_COV ? require('../lib-cov') : require('../src');

  describe('to', function() {
    describe('auto', function() {
      it('should write to a path', function(next) {
        var data;
        data = "20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27";
        return csv().from(data).to("" + __dirname + "/fromto/string_to_stream.tmp").on('finish', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/fromto/string_to_stream.out");
          result = fs.readFileSync("" + __dirname + "/fromto/string_to_stream.tmp");
          result.should.eql(expect);
          return fs.unlink("" + __dirname + "/fromto/string_to_stream.tmp", next);
        });
      });
      return it('should write to a string', function(next) {
        var data;
        data = "20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27";
        return csv().from.string(data).to(function(output) {
          output.should.eql(data);
          return next();
        });
      });
    });
    describe('string', function() {
      return it('should write to a string', function(next) {
        var data;
        data = "20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27";
        return csv().from.string(data).to.string(function(output, count) {
          output.should.eql(data);
          count.should.eql(2);
          return next();
        });
      });
    });
    describe('path', function() {
      return it('Test string to stream', function(next) {
        var data;
        data = "20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27";
        return csv().from.string(data).to.path("" + __dirname + "/fromto/string_to_stream.tmp").on('record', function(record, index) {
          index.should.be.below(2);
          if (index === 0) {
            return record[0].should.eql('20322051544');
          } else if (index === 1) {
            return record[0].should.eql('28392898392');
          }
        }).on('finish', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/fromto/string_to_stream.out");
          result = fs.readFileSync("" + __dirname + "/fromto/string_to_stream.tmp");
          result.should.eql(expect);
          return fs.unlink("" + __dirname + "/fromto/string_to_stream.tmp", next);
        });
      });
    });
    describe('array', function() {
      return it('should output an array', function(next) {
        var data;
        data = "20322051544,1979.0,8.8017226E7,ABC,45,2000-01-01\n28392898392,1974.0,8.8392926E7,DEF,23,2050-11-27";
        return csv().from.string(data).to.array(function(data) {
          data.should.eql([['20322051544', '1979.0', '8.8017226E7', 'ABC', '45', '2000-01-01'], ['28392898392', '1974.0', '8.8392926E7', 'DEF', '23', '2050-11-27']]);
          return next();
        });
      });
    });
    return describe('end', function() {
      it('should call the end function', function(next) {
        var out;
        out = function() {
          this.writable = true;
          return this;
        };
        out.prototype.__proto__ = stream.prototype;
        out.prototype.write = function(data) {
          return true;
        };
        out.prototype.end = next;
        out = new out;
        return csv().from.array(['a', 'b']).to.stream(out);
      });
      return it('should not call the end function if end is false', function(next) {
        var out;
        out = function() {
          this.writable = true;
          return this;
        };
        out.prototype.__proto__ = stream.prototype;
        out.prototype.write = function(data) {
          return true;
        };
        out.prototype.end = function() {
          return true.should.not.be.ok;
        };
        out = new out;
        return csv().from.array(['a', 'b']).to.stream(out, {
          end: false
        }).on('end', function() {
          return setTimeout(next, 200);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=to.map
